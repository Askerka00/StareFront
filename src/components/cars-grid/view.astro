---
import { differenceInDays } from "date-fns";

import { formatDateTime } from "@/shared/lib/dates";
import { defaultEndDateTime, defaultStartDateTime } from "@/entities/model";
import { containerStyles } from "@/shared/ui/container";
import { useTranslations } from "@/shared/i18n";
import type { CarInterface } from "@/shared/api/cars";
import { Car, PricesDays } from "@/components/car";
import { Select } from "@/shared/ui/select";
import { parseDateTime } from "@/shared/lib/dates.ts";
import { api } from "@/shared/api";
import { defaultLocationFrom, defaultLocationTo } from "@/entities/model.ts";

import styles from "./styles.module.css";
import { shuffleArray } from "@/shared/lib/shuffle-array.ts";

interface Props {
  items: CarInterface[];
}

const { items } = Astro.props;

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-expect-error
const { locale } = Astro.locals;
const t = useTranslations(locale);

const searchParams = Astro.url.searchParams;

const startDateTime = searchParams.has("startDateTime")
  ? searchParams.get("startDateTime") ?? formatDateTime(defaultStartDateTime)
  : formatDateTime(defaultStartDateTime);

const endDateTime = searchParams.has("endDateTime")
  ? searchParams.get("endDateTime") ?? formatDateTime(defaultEndDateTime)
  : formatDateTime(defaultEndDateTime);

const locationFrom = searchParams.has("locationFrom")
  ? searchParams.get("locationFrom") ?? defaultLocationFrom
  : defaultLocationFrom;

const locationTo = searchParams.has("locationTo")
  ? searchParams.get("locationTo") ?? defaultLocationTo
  : defaultLocationTo;

const sortByPrice = searchParams.has("sortByPrice")
  ? searchParams.get("sortByPrice")
  : "none";
const sortOptions = [
  {
    value: "none",
    name: t("grid.sort.choose"),
  },
  {
    value: "low",
    name: t("grid.sort.low"),
  },
  {
    value: "high",
    name: t("grid.sort.high"),
  },
];

const days = differenceInDays(
  parseDateTime(endDateTime),
  parseDateTime(startDateTime),
);

let sortedItems = shuffleArray(items);

if (sortByPrice !== "none") {
  // @ts-ignore
  sortedItems = items.sort((a, b) => {
    if (sortByPrice === "low") {
      return a.pricePerDay - b.pricePerDay;
    } else if (sortByPrice === "high") {
      return b.pricePerDay - a.pricePerDay;
    }
  });
}
---

<section class:list={[containerStyles, styles.root]}>
  <div class={styles.wrapper}>
    <header class={styles.header}>
      <h2 class={styles.heading}>{t("grid.title")}</h2>
      <p class={styles.supportingText}>
        {t("grid.description")}
      </p>
    </header>
    <wc-sort-by-price>
      <Select
        name="price"
        label={t("grid.sort.sortByPrice")}
        class={styles.select}
      >
        {
          sortOptions.map(({ value, name }) => {
            if (value === sortByPrice) {
              return (
                <option value={value} selected="true">
                  {name}
                </option>
              );
            } else {
              return <option value={value}>{name}</option>;
            }
          })
        }
      </Select>
    </wc-sort-by-price>
  </div>
  <div class={styles.grid}>
    {
      items.map(async (item) => {
        const price = await api.checkout.getPrice({
          carId: item.id,
          locationFrom,
          locationTo,
          startDateTime,
          endDateTime,
          withInsurance: false,
        });

        return (
          <Car
            class={styles.listItem}
            imgSrc={item.imgSrc}
            badge={item.badge}
            id={item.id}
            name={item.name}
            description={item.description}
            hasInstantBooking={item.hasInstantBooking}
            hasInsurance={item.hasInsurance}
            hasFreeCancelation={item.hasFreeCancelation}
            year={item.year}
            transmission={item.transmission}
            engineVolume={item.engineVolume}
          >
            <PricesDays
              priceTotalFormatted={price.rentPrice}
              priceOneDayFormatted={price.carPricePerDay}
              days={days}
            />
          </Car>
        );
      })
    }
  </div>
</section>
<script is:inline>
  class SortByPrice extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      const selectElement = this.querySelector("select");

      if (selectElement) {
        selectElement.addEventListener("change", (event) => {
          const { value } = event.target;
          const url = new URL(window.location.href);

          url.searchParams.set("sortByPrice", value);

          window.location.href = url.toString();
        });
      }
    }
  }

  customElements.define("wc-sort-by-price", SortByPrice);
</script>
